{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf340
{\fonttbl\f0\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue255;\red83\green83\blue83;\red15\green112\blue1;
}
\paperw11900\paperh16840\margl1440\margr1440\vieww18280\viewh16280\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs26 \cf2 \expnd0\expndtw0\kerning0
CREATE VIEW \cf0 StudentsFollowing \cf2 AS \cf0 (\
\'a0\'a0\cf2 SELECT Student.studentID, \cf0 name\cf3 , \cf0 nationalIDNbr\cf3 , \cf0 attendingProgramme\cf3 , \cf0 BelongsTo.branchName \cf2 AS \cf0 attendingBranch\
\'a0\'a0\cf2 FROM \cf0 Student\
\'a0\'a0\cf2 LEFT JOIN \cf0 belongsTo\
\'a0\'a0\cf2 ON \cf0 Student.studentID \cf2 = \cf0 BelongsTo.studentID\
)\cf3 ;\
\
\
\cf2 CREATE VIEW \cf0 FinishedCourses \cf2 AS \cf0 (\
\'a0\'a0\cf2 SELECT \cf0 name\cf3 , \cf0 course.coursename\cf3 , \cf0 grade\cf3 , \cf0 course.credits\
\'a0 \cf2 FROM \
       \cf0 (\
       \cf2 SELECT \cf0 student.name \cf2 AS \cf0 name\cf3 , \cf0 coursecode\cf3 , \cf0 grade\
       \cf2 FROM \cf0 completed\
       \cf2 INNER JOIN \cf0 Student\
	    \cf2 ON \cf0 student.studentID\cf2 =\cf0 completed.studentID\
       ) \cf2 AS \cf0 temp\
\'a0\'a0\cf2 INNER JOIN \cf0 course\
\'a0\'a0   \cf2 ON \cf0 temp.coursecode\cf2 =\cf0 course.coursecode\
)\cf3 ;\
\
\
\cf2 CREATE VIEW \cf0 registrations (studentid\cf3 , \cf0 coursecode\cf3 , \cf0 currentstatus)\'a0\cf2 AS (\cf0 \
    \cf2 SELECT \cf0 takes.studentid\cf3 , \cf0 takes.coursecode\cf3 ,\cf0  \cf4 'Registered'\cf0 \
    \cf2 FROM \cf0 takes\
\cf2   UNION \cf0 \
\'a0 \'a0 \cf2 SELECT \cf0 queuesfor.studentid\cf3 , \cf0 queuesfor.coursecode\cf3 ,\cf0  \cf4 'Waiting'\cf0 \
\'a0 \'a0 \cf2 FROM \cf0 queuesfor\cf3 \
);\
\
\
CREATE VIEW PassedCourses AS (\
  \cf2 SELECT \cf0 completed.studentid\cf3 , \cf0 completed.coursecode\cf3 , \cf0 course.credits\
\'a0 \cf2 FROM \cf0 completed\
\'a0 LEFT \cf2 JOIN \cf0 course\
    \cf2 ON \cf0 completed.coursecode \cf2 = \cf0 course.coursecode \cf2 AND \cf0 completed.grade \cf2 <> \cf4 'U'\cf3 \
);\
\
CREATE VIEW UnreadMandatory AS(\
  WITH manstudent AS (\
    SELECT DISTINCT studentsfollowing.studentid, temp.coursecode\
    FROM studentsfollowing\
    INNER JOIN (SELECT programmename, branchName, coursecode\
    FROM mandatoryforbranch\
    UNION\
    SELECT programmename, '' AS branchName, coursecode\
  FROM mandatoryforprogramme) AS temp\
    ON (studentsfollowing.attendingprogramme = temp.programmename\
    AND studentsfollowing.attendingbranch = temp.branchname) OR \
    (studentsfollowing.attendingprogramme = temp.programmename AND\
    temp.branchname = '')\
  )\
\
  SELECT *\
  FROM manstudent\
  EXCEPT\
  SELECT studentid, coursecode\
  FROM completed\
);\
\
\
CREATE VIEW PathToGraduation AS (\
   WITH semResMathManCred AS (\
      WITH researchMathManCred AS (\
         WITH mathMandatoryCredits AS (\
            WITH nbrMandatoryAndCredits AS (\
               WITH nbrOfCredits AS (\
                  SELECT studentsfollowing.studentid, (CASE WHEN SUM(passedcourses.credits) IS NULL THEN '0' ELSE SUM(passedcourses.credits) END) AS totalcredits\
                  FROM passedcourses\
                  RIGHT JOIN studentsfollowing\
                     ON studentsfollowing.studentid = passedcourses.studentid\
                  GROUP BY studentsfollowing.studentid\
               )\
\
               SELECT nbrOfCredits.studentid, totalcredits, (CASE WHEN COUNT(unreadmandatory.coursecode) IS NULL THEN '0' ELSE COUNT(unreadmandatory.coursecode) END) AS nbrOfUnreadMandatory\
               FROM nbrOfCredits\
               LEFT JOIN unreadmandatory\
                  ON nbrOfCredits.studentid = unreadMandatory.studentid\
               GROUP BY nbrOfCredits.studentid, nbrOfCredits.totalcredits\
            )\
   \
            SELECT nbrMandatoryAndCredits.studentid, totalcredits, nbrOfUnreadMandatory, (CASE WHEN temp.mathcredits IS NULL THEN '0' ELSE temp.mathcredits END) AS mathcredits\
            FROM nbrMandatoryAndCredits\
            LEFT JOIN (\
                       SELECT passedcourses.studentid, SUM(passedcourses.credits) AS mathcredits\
                       FROM passedcourses\
                       INNER JOIN classifiedas\
                          ON passedcourses.coursecode = classifiedas.coursecode AND classifiedas.name='Mathematical'\
                       GROUP BY passedcourses.studentid\
                       ) AS temp\
               ON nbrMandatoryAndCredits.studentid = temp.studentid\
         )\
   \
         SELECT mathMandatoryCredits.studentid, totalcredits, nbrOfUnreadMandatory, mathcredits, (CASE WHEN temp.researchCredits IS NULL THEN '0' ELSE temp.researchCredits END) AS researchCredits\
         FROM mathMandatoryCredits\
         LEFT JOIN (\
                   SELECT passedcourses.studentid, SUM(passedcourses.credits) AS researchCredits\
                   FROM passedcourses\
                   INNER JOIN classifiedas\
                      ON passedcourses.coursecode = classifiedas.coursecode AND classifiedas.name='Research'\
                   GROUP BY passedcourses.studentid\
                   ) AS temp\
            ON mathMandatoryCredits.studentid=temp.studentid\
      )\
   \
   SELECT researchMathManCred.studentid, totalcredits, nbrOfUnreadMandatory, mathcredits, researchCredits, (CASE WHEN temp.nbrOfSeminar IS NULL THEN '0' ELSE temp.nbrOfSeminar END) AS nbrOfSeminar\
   FROM researchMathManCred\
   LEFT JOIN (\
             SELECT passedcourses.studentid, COUNT(passedcourses.coursecode) AS nbrOfSeminar\
             FROM passedcourses\
             INNER JOIN classifiedas\
                ON passedcourses.coursecode = classifiedas.coursecode AND classifiedas.name='Seminar'\
             GROUP BY passedcourses.studentid\
             ) AS temp\
      ON researchMathManCred.studentid=temp.studentid\
   )\
   \
   SELECT semResMathManCred.studentid, totalcredits, nbrOfUnreadMandatory, mathcredits, researchCredits, nbrOfSeminar,\
   (CASE WHEN (nbrOfUnreadMandatory=0 AND mathcredits>=20 AND researchCredits>=10 AND nbrOfSeminar>=1 AND recommendedCredits.credits>=10) THEN 'YES' ELSE 'NO' END) AS canGraduate\
   FROM semResMathManCred\
   LEFT JOIN (\
             SELECT temp.studentid, SUM(passedcourses.credits) AS credits\
             FROM (  \
                  SELECT studentsfollowing.studentid, recommendedForBranch.coursecode\
                  FROM studentsfollowing\
                  INNER JOIN recommendedForBranch\
                     ON studentsfollowing.attendingprogramme=recommendedForBranch.programmename AND studentsfollowing.attendingbranch=recommendedForBranch.branchname\
                  ) AS temp\
             INNER JOIN passedcourses\
               ON temp.coursecode=passedcourses.coursecode AND temp.studentid=passedcourses.studentid\
             GROUP BY temp.studentid\
             ) AS recommendedCredits\
     ON semResMathManCred.studentid=recommendedCredits.studentid\
);\
\
\
\
\
\
\
WITH grades AS (\
	SELECT * FROM courses\
), students AS (\
	SELECT * FROM students\
)\
\
\
\
SELECT students.studentid, grades.coursecode\
FROM grades\
RIGHT JOIN students\
  ON students.studentid = grades.studentid\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
}